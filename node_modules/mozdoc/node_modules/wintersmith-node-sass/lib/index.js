// Generated by CoffeeScript 1.6.3
var ccss, fs, sass,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

sass = require('node-sass');

ccss = require('clean-css');

module.exports = function(env, callback) {
  var NodeSassPlugin;
  NodeSassPlugin = (function(_super) {
    __extends(NodeSassPlugin, _super);

    function NodeSassPlugin(filepath) {
      this.filepath = filepath;
    }

    NodeSassPlugin.prototype.getFilename = function() {
      return this.filepath.relative.replace(/scss$/, 'css');
    };

    NodeSassPlugin.prototype.getView = function() {
      return function(env, locals, contents, templates, callback) {
        var config, includePaths;
        config = env.config['node-sass'] || {};
        includePaths = config.includePaths || [];
        includePaths.push(env.config.templates);
        includePaths.push(env.config.contents);
        return sass.render({
          file: this.filepath.full,
          includePaths: includePaths,
          success: function(css) {
            if (config.minify !== false) {
              css = ccss.process(css, env.config['clean-css']);
            }
            return callback(null, new Buffer(css));
          },
          error: function(err) {
            return callback(new Error(err));
          }
        });
      };
    };

    NodeSassPlugin.fromFile = function(filepath, callback) {
      var plugin;
      plugin = new NodeSassPlugin(filepath);
      return callback(null, plugin);
    };

    env.registerContentPlugin('styles', '**/*.scss', NodeSassPlugin);

    return NodeSassPlugin;

  })(env.ContentPlugin);
  return callback();
};
